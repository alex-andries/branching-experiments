name: RELEASE PROD VERSION

# This workflow is designed to be run after the changesets PR has been closed and
# merged. It should not run for any other PR closure, and should not run if the changesets
# PR is closed and dismissed without merging. This workflow fetches the version number
# in package.json and creates a tag using it, then creates a release using that tag. This
# release should then trigger `cd-prod.yml`

on:
  pull_request:
    branches:
      - main
    types:
      - closed

permissions:
  id-token: write
  contents: write

jobs:
  fetch-version:
    if: ${{ (github.event.pull_request.merged == true) && (startsWith(github.head_ref, 'changeset-release/')) }}
    name: Fetch Version
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.get.outputs.RELEASE_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Fetch Version
        id: get
        run: |
          export RELEASE_VERSION=$(cat package.json | grep '"version":' | tr -d '"' | tr -d 'version: ' | tr -d ',')
          echo $RELEASE_VERSION
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
      - name: Create Tag
        run: |
          git fetch
          git checkout main
          git tag RC-${{ env.RELEASE_VERSION }}
          git push origin --tags
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "RC-${{ env.RELEASE_VERSION }}"
      - name: Sync development branch back to main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch
          git checkout main
          git pull origin main
          git checkout development
          git pull origin development
          git merge main
          git push origin development

  prod-cd:
    name: PROD
    runs-on: ubuntu-latest
    needs: fetch-version
    if: ${{ (github.event.pull_request.merged == true) && (startsWith(github.head_ref, 'changeset-release/')) }}
    steps:
      - name: Simulates CD to Prod
        run: echo "Simulated release of version ${{ needs.fetch-version.outputs.RELEASE_VERSION }} to production"
