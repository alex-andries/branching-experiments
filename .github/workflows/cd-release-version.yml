name: RELEASE PROD VERSION

on:
  pull_request:
    types:
      - closed

permissions:
  id-token: write
  contents: write

jobs:
  fetch-version:
    if: ${{ github.event.pull_request.merged == true && ((startsWith(github.event.pull_request.head.ref, 'changeset-release/') && github.event.pull_request.base.ref == 'main') || (startsWith(github.event.pull_request.head.ref, 'hotfix/') && github.event.pull_request.base.ref == 'hotfix_release_branch')) }}
    name: Fetch Version
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.get.outputs.RELEASE_VERSION }}
      RELEASE_TAG: ${{ steps.create_tag.outputs.RELEASE_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - name: Fetch Version
        id: get
        run: |
          RELEASE_VERSION=$(grep -oP '"version":\s*"\K[0-9]+\.[0-9]+\.[0-9]+' package.json)
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "::set-output name=RELEASE_VERSION::$RELEASE_VERSION"
      - name: Create Tag
        id: create_tag
        run: |
          TAG_NAME="RC-${{ env.RELEASE_VERSION }}"
          git tag $TAG_NAME
          git push origin $TAG_NAME
          echo "RELEASE_TAG=$TAG_NAME" >> $GITHUB_ENV
          echo "::set-output name=RELEASE_TAG::$TAG_NAME"
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.create_tag.outputs.RELEASE_TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  manage-hotfix-release-branch:
    name: Manage Hotfix Release Branch
    runs-on: ubuntu-latest
    needs: fetch-version
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' && startsWith(github.event.pull_request.head.ref, 'changeset-release/') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Delete Existing hotfix_release_branch
        run: |
          git push origin --delete hotfix_release_branch || true
      - name: Create hotfix_release_branch from Latest Tag
        run: |
          git fetch origin --tags
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          git checkout -b hotfix_release_branch $LATEST_TAG
          git push origin hotfix_release_branch --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Protect hotfix_release_branch
        run: |
          curl -X PUT -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.luke-cage-preview+json" \
            https://api.github.com/repos/${{ github.repository }}/branches/hotfix_release_branch/protection \
            -d '{"required_status_checks":{"strict":true,"contexts":[]},"enforce_admins":true,"required_pull_request_reviews":{"dismiss_stale_reviews":true},"restrictions":null}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  prod-cd:
    name: PROD
    runs-on: ubuntu-latest
    needs: [fetch-version]
    if: ${{ github.event.pull_request.merged == true && ((startsWith(github.event.pull_request.head.ref, 'changeset-release/') && github.event.pull_request.base.ref == 'main') || (startsWith(github.event.pull_request.head.ref, 'hotfix/') && github.event.pull_request.base.ref == 'hotfix_release_branch')) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - name: Simulate CD
        run: |
          echo "Starting deployment to production..."
          echo "Deploying version ${{ needs.fetch-version.outputs.RELEASE_VERSION }} to production..."
          CONTENTS=""
          for markdown in src/*.md; do
            CONTENTS="$CONTENTS\n$(cat $markdown)"
          done
          echo -e $CONTENTS
