name: RELEASE PROD VERSION

on:
  pull_request:
    types:
      - closed

permissions:
  id-token: write
  contents: write

jobs:
  fetch-version:
    if: ${{ github.event.pull_request.merged == true && ((startsWith(github.event.pull_request.head.ref, 'changeset-release/') && github.event.pull_request.base.ref == 'main') || (startsWith(github.event.pull_request.head.ref, 'hotfix/') && github.event.pull_request.base.ref == 'hotfix_release_branch')) }}
    name: Fetch Version
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.get.outputs.RELEASE_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - name: Fetch Version
        id: get
        run: |
          export RELEASE_VERSION=$(cat package.json | grep '"version":' | tr -d '"' | tr -d 'version: ' | tr -d ',')
          echo $RELEASE_VERSION
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "::set-output name=RELEASE_VERSION::$RELEASE_VERSION"
      - name: Create Tag
        run: |
          git tag v${{ env.RELEASE_VERSION }}
          git push origin --tags
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.RELEASE_VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  prod-cd:
    name: PROD
    runs-on: ubuntu-latest
    needs: fetch-version
    if: ${{ github.event.pull_request.merged == true && ((startsWith(github.event.pull_request.head.ref, 'changeset-release/') && github.event.pull_request.base.ref == 'main') || (startsWith(github.event.pull_request.head.ref, 'hotfix/') && github.event.pull_request.base.ref == 'hotfix_release_branch')) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - name: Simulate CD
        run: |
          echo "Starting deployment to production..."
          echo "Deploying version ${{ needs.fetch-version.outputs.RELEASE_VERSION }} to production..."
          CONTENTS=""
          for markdown in src/*.md; do
            CONTENTS="$CONTENTS\n$(cat $markdown)"
          done
          echo -e $CONTENTS
